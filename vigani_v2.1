#include <SD.h>
#include <SPI.h>
#include <Servo.h>
#include <Wire.h>
#include <HMC5883L.h>
#include <TinyGPS++.h>

TinyGPSPlus gps;
HMC5883L compass;
Servo ESC;  
Servo rudder;
int ESCpin = 13;                          //Servo on pin 9
int armValue=800;                           // "zero" position for arming ESC. As some wont arm with a '0' value fromthe arduino. 
int pos = 90;
unsigned long time;
boolean tt = true;
int arm_time=1;
int pulse=1000;
boolean motorrun=false;
int speed;
boolean reverse=false;
String fixed;
File waypoints;
char c=0;
char byteRead;
int tot_wps_infile;
int blah=1;
int blah2=1;
double lat_gps;
double lon_gps;
String fix_gps;
int waypoint;
boolean homei = false;
double wlat, wlon;

TinyGPSCustom ellipsoidalHeight(gps, "GPGGA", 11);
TinyGPSCustom h_dop(gps, "GPGGA", 8);
TinyGPSCustom northing(gps, "GPGGA", 3);
TinyGPSCustom easting(gps, "GPGGA", 5);
TinyGPSCustom fix(gps, "GPGGA", 6);



String locate_wp(int needed_wp){
  String lat_lon="";
  int curr_line=0;
  
  if (SD.exists("test.txt")) { //checking if the file exists
    waypoints = SD.open("test.txt",FILE_READ);
    
    while(waypoints.available()) {
     c = waypoints.read();
     
     if(c=='\n') {
       curr_line++;
     }
     
     if (curr_line == needed_wp) {
       lat_lon += c;
       lat_lon.trim();
       
       if(c==';') {
         waypoints.flush();
         waypoints.close();
         return lat_lon;
       }
      }
    }
    waypoints.flush();
    waypoints.close();
    
    if (!waypoints.available()) {
      lat_lon="NMWPS";
      return lat_lon;
    }

  } else {
      Serial.println(F("Could not open the file"));
  } 
}

/*
Counts the total wap points in given file.
Uses locate_wp() function.
Returns count (type int).
*/
int total_wps(){
  int total_wps;
  for (total_wps=0; total_wps<=1000; total_wps++) {
    String check_wp;
    check_wp = locate_wp(total_wps);
    if (check_wp == "NMWPS") {
      return total_wps;
    }
  }
}

void arm(){                                //Arming sequence of sending a minimum or 'joystick zero' for 2 seconds to simulate radio gear is ON and operational.  
  ESC.write(armValue); 
  delay(2500); 
}
/*
Function descr here...
Uses TinyGPS++ lib.
*/
bool feedGPS() {
  while (Serial1.available()) {
    if (gps.encode(Serial1.read())) {
      return true;    
    }
  }
  return false;
}

/*
Function descr here...
timestamp, lat, lon, z
Uses TinyGPS++ lib.
*/
void getcurGPS() {
  
  feedGPS();
  fix_gps = fix.value();
  //Serial.println(fix_gps);
  if (fix_gps>="1")
 {
   
    feedGPS();
    if (gps.location.isUpdated()) {
    lat_gps = gps.location.lat();
    lon_gps = gps.location.lng();
    write_points(gps.date.value(),gps.time.value(),gps.satellites.value(),h_dop.value(),gps.location.lat(),northing.value(),gps.location.lng(),easting.value(),ellipsoidalHeight.value());
    } 
}
}
void write_points(double write_date, double write_time, int write_sats, const char *write_hdop, double write_lat, const char *write_northing, double write_lon, const char *write_easting, const char *write_elipsheight) {
  File log_file = SD.open("abc.csv", FILE_WRITE);
  if (log_file) {
    log_file.print(write_date);
    log_file.print('_');
    log_file.print(write_time);
    log_file.print(',');
    log_file.print(write_sats);
    log_file.print(',');
    log_file.print(write_hdop);
    log_file.print(',');
    log_file.print(write_lat,6);
    log_file.print(',');
    log_file.print(write_northing);
    log_file.print(',');
    log_file.print(write_lon,6);
    log_file.print(',');
    log_file.print(write_easting);
    log_file.print(',');
    log_file.println(write_elipsheight);
    log_file.close();
  }
}

double calc_course(const double wlat, const double wlon) {
    //const double DEST_LAT = 4.2029716;
    //const double DEST_LON = 73.231562;
    double coursetodest =
      gps.courseTo(
        lat_gps,
        lon_gps,
        wlat,
        wlon);
    //Serial.println();
    //Serial.print(coursetodest);
    //Serial.print(gps.cardinal(coursetodest));
    return coursetodest;   
}

double calc_distKm(const double wlat, const double wlon) {
    //const double DEST_LAT = 4.2029716;
    //const double DEST_LON = 73.231562;
    double disttodest =
      gps.distanceBetween(
        lat_gps,
        lon_gps,
        wlat,
        wlon) ;/// 1000.0;
    //Serial.println();
    //Serial.print(disttodest);
    //disttodest<1;
  if (disttodest)//9 meter radius
    {
      if(tot_wps_infile==waypoint){
        homei = true;
        motorrun = false;
        ESC.write(600);
        Serial.println("END OF TRIP");
      }
      waypoint++;
    }    
    return disttodest;
}



void setupHMC5883L(){
  //Setup the HMC5883L, and check for errors
  int error;
  error = compass.SetScale(1.3); //Set the scale of the compass.
  if(error != 0) ;//Serial.println(compass.GetErrorText(error)); //check if there is an error, and print if so

  error = compass.SetMeasurementMode(Measurement_Continuous); // Set the measurement mode to Continuous
  if(error != 0);// Serial.println(compass.GetErrorText(error)); //check if there is an error, and print if so
}

float getHeading(){
  //Serial.println("Fetch heading from compass: ");
  //Get the reading from the HMC5883L and calculate the heading
  MagnetometerScaled scaled = compass.ReadScaledAxis(); //scaled values from compass.
  float declinationAngle = -0.05235;
  float heading = atan2(scaled.YAxis, scaled.XAxis)+declinationAngle;
  
  // If you have an EAST declination, use += declinationAngle, if you have a WEST declination, use -= declinationAngle
  heading -= declinationAngle;
  // Correct for when signs are reversed.
  if(heading < 0)
    heading += 2 * PI;
  // Check for wrap due to addition of declination.
  if(heading > 2 * PI)
    heading -= 2 * PI;
  //-0.0523598776
  
  //Serial.println(heading);
  return (int) (heading * 180 / M_PI); //radians to degrees
}

int setMotor(boolean motorrun)//this part works
{
 
//int pulse=1250;
  if(motorrun){
       
  ESC.write(1200);                      //Send servo position - Motor speed to ESC.
  Serial.println("motor runing");                     //Send servo 
  delay(200);                              //pause for 1/10 second.
  //return();
  }
}


void setup() {
  // put your setup code here, to run once:
  //hom =true;
  Serial.begin(19200);
  Serial1.begin(9600);
  SD.begin(4);
  //ss.begin(9600);
  Wire.begin();
  compass = HMC5883L(); //new instance of HMC5883L library
  setupHMC5883L(); //setup the HMC5883L
  
  //Serial.println(F("Calculating total WPs ..."));
  tot_wps_infile = total_wps();
  Serial.print(F("Total WPS in file = "));
  Serial.println(tot_wps_infile);
  //Serial.println();
  
  delay(500);
  
  File log_file = SD.open("abc.csv", FILE_WRITE);
  if (log_file) {
    log_file.println("#########################################"); 
    String header = ("date_time(UTC), sats-in-use, hdop, lat, northing, lon, easting, ellipsiodal-height");
    log_file.println(header);
    log_file.flush();
    log_file.close();
  } else {
    Serial.println(F("Couldn't open log (aquired GPS) file"));
  }
  
  Serial.println("Align rudder");
  rudder.attach(12);
  rudder.write(90);
  delay(10);
  Serial.println("Rudder done");
  //rudder.detach();
  tot_wps_infile--;
  //waypoint=1;
  motorrun=true;
  
  Serial.println("Start motor ARMING");
  ESC.attach(ESCpin);
  arm();
  Serial.println("Motor Armed");
  //delay(10000);
}
 


void loop() {
  

  bool newdata = false;
  unsigned long start = millis();
  
  while (millis() - start < 1000) {
    if (feedGPS()) {
      newdata = true;
    }
  }
  feedGPS();
  fixed = fix.value();
//&& fixed >="1"
  if (homei==false && fixed >="1"){
  //Serial.println("fixed");
  Serial.print("current waypoint: ");
  Serial.println(waypoint);  

  
  if (newdata) {
    getcurGPS();
    Serial.print("GPS LAT: ");
    Serial.println(lat_gps,6);
    Serial.print("GPS LON: ");
    Serial.println(lon_gps,6);    
  }
  
      String returned_wp;
      returned_wp = locate_wp(waypoint);

      String  latdff = returned_wp.substring(2,10);
      char latbuf[latdff.length()];
      latdff.toCharArray(latbuf,latdff.length());
      double dlat =atof(latbuf);
      
      String  londff = returned_wp.substring(11,20);
      char lonbuf[londff.length()];
      londff.toCharArray(lonbuf,londff.length());
      double dlon =atof(lonbuf);

       //comment above for debug. below part ok
      double dit2way = calc_distKm(dlat,dlon );
      Serial.print("Distance to waypoint: ");
      Serial.println(dit2way);
      //calc_course(wlat, wlon);
      double cou2way = calc_course(dlat, dlon);
      Serial.print("GPS Bearing to waypoint: ");
      Serial.println(cou2way);
     
      int heading = getHeading();
      Serial.print("Compass data: ");
      Serial.println(heading);
  
      int error1 = cou2way - heading;
      Serial.print("GPS head-compass head: ");
      Serial.println(error1);
      if (error1 >= 180)
        error1 -= 360;
      if (error1 <= -180)
        error1 += 360;
      // Update servo and keep with range of +/- 60
      if (error1 > 60)
        error1 = 60;
      if (error1 < -60)
        error1 = -60;
      rudder.attach(12);
      rudder.write(90+error1);
      delay(1);
      
  //this part works
  if(motorrun==false)
  {
    setMotor(false); 
  }
    else if (motorrun==true)
    {
    setMotor(true);
    }
  }
}


